{"version":3,"sources":["components/Key.js","components/Header.js","components/MapTypeSelector.js","mapSetup.js","popupContentFactory.js","components/App.js","serviceWorker.js","index.js"],"names":["Key","react_default","a","createElement","className","Header","MapTypeSelector","e","this","props","updateMapType","target","value","type","checked","currentMapType","onChange","handleChange","bind","Component","DefaultIcon","L","icon","iconUrl","shadowUrl","iconShadow","Marker","prototype","options","fiberStyles","feature","properties","OWNER","color","addFiberCables","map","geoJSON","fiberCables","style","onEachFeature","layer","bindPopup","_feature$properties2","LENGTH_MET","concat","Math","round","buildFiberPopupContent","addTo","buildMapTiles","tileLayer","attribution","maxZoom","id","accessToken","process","mapSetup","mapType","_layersMaxZoom","setView","points","litBuildings","_feature$properties","MUNICIPALI","ZIPCODE","ADDRESS","LATITUDE","LONGITUDE","buildBuildingPopupContent","clusters","markerClusterGroup","maxClusterRadius","addLayer","addLitBuildingClusters","streetTiles","satelliteTiles","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","window","innerHeight","_mapSetup","setState","_this$state","removeLayer","height","getScreenSize","MapTypeSelector_MapTypeSelector","Boolean","location","hostname","match","require","config","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd4bfb34.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Key() {\n  return (\n    <div className=\"key\">\n      <div className=\"key__title\">Fiber Cable Key:</div>\n      <div className=\"key__entry\"><div className=\"key__square key__square--gwi\"></div>GWI</div>\n      <div className=\"key__entry\"><div className=\"key__square key__square--xo\"></div>XO</div>\n      <div className=\"key__entry\"><div className=\"key__square key__square--zayo\"></div>Zayo</div>\n      <div className=\"key__entry\"><div className=\"key__square key__square--other\"></div>Other</div>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function Header() {\n  return (\n    <div className=\"header\">\n      Fiber Cables and Lit Buildings of Maine\n    </div>\n  )\n}\n","import React, { Component } from 'react'\n\nexport default class MapTypeSelector extends Component {\n  handleChange (e) {\n    this.props.updateMapType(e.target.value)\n  }\n\n  render() {\n    return (\n      <form className=\"map-type-selector\">\n        <div className=\"map-type-selector__title\">Map Type:</div>\n        <div className=\"map-type-selector__option\">\n          <input type=\"radio\" checked={this.props.currentMapType === 'satellite'} onChange={this.handleChange.bind(this)} value=\"satellite\"/>\n          Satellite\n        </div>\n        <div className=\"map-type-selector__option\">\n          <input type=\"radio\" checked={this.props.currentMapType === 'street'} onChange={this.handleChange.bind(this)} value=\"street\"/>\n          Street\n        </div>\n      </form>\n    )\n  }\n}\n\n","import L from 'leaflet'\nimport 'leaflet.markercluster/dist/leaflet.markercluster.js'\nimport fiberCables from './map_data/maine_fiber_cables.json'\nimport litBuildings from './map_data/maine_lit_buildings.json'\nimport { buildBuildingPopupContent, buildFiberPopupContent } from './popupContentFactory'\n\n// begin workaround for icon bug https://github.com/Leaflet/Leaflet/issues/4968\nimport icon from 'leaflet/dist/images/marker-icon.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\n\nlet DefaultIcon = L.icon({\n    iconUrl: icon,\n    shadowUrl: iconShadow\n});\n\nL.Marker.prototype.options.icon = DefaultIcon;\n// end workaround\n\nconst MAPBOX_TOKEN = process.env.REACT_APP_MAPBOX_TOKEN\n\nconst fiberStyles = (feature) => {\n  switch(feature.properties.OWNER) {\n    case 'GWI': return { color: 'green' }\n    case 'Zayo': return { color: 'red' }\n    case 'XO': return { color: 'blue' }\n    default: return { color: 'gray' }\n  }\n}\n\nconst addLitBuildingClusters = (map) => {\n  const points = L.geoJSON(litBuildings, {\n    onEachFeature: (feature, layer) => {\n      layer.bindPopup(buildBuildingPopupContent(feature));\n    }\n  })\n\n  let clusters = L.markerClusterGroup({\n    maxClusterRadius: 40\n  })\n  \n  clusters.addLayer(points)\n  map.addLayer(clusters)\n}\n\nconst addFiberCables = (map) =>\n  L.geoJSON(fiberCables, {\n    style: fiberStyles,\n    onEachFeature: (feature, layer) => {\n      layer.bindPopup(buildFiberPopupContent(feature));\n    }\n  }).addTo(map)\n\nconst buildMapTiles = (type) =>\n  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {\n      attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n      maxZoom: 18,\n      id: 'mapbox.' + type,\n      accessToken: MAPBOX_TOKEN\n  })\n\n\n\nexport default (mapType) => {\n  let map = L.map('map')\n  map._layersMaxZoom = 19 // workaround for layer being added before maxzoom is defined.\n  map = map.setView([45.2538, -69.4455], 7)\n  map = addFiberCables(map)\n  addLitBuildingClusters(map)\n  const streetTiles = buildMapTiles('streets')\n  const satelliteTiles = buildMapTiles('satellite')\n  map.addLayer(mapType === 'street' ? streetTiles : satelliteTiles)\n\n  return {\n    map,\n    streetTiles,\n    satelliteTiles\n  }\n}","export const buildBuildingPopupContent = (feature) => {\n  const { MUNICIPALI, ZIPCODE, ADDRESS, LATITUDE, LONGITUDE } = feature.properties\n  \n  return (\n    `\n      <p>${ADDRESS}, ${MUNICIPALI}, ${ZIPCODE}</p>\n      <p>${LATITUDE}, ${LONGITUDE}</p>\n    `\n  )\n}\n\nexport const buildFiberPopupContent = (feature) => {\n  const { OWNER, LENGTH_MET } = feature.properties\n\n  return (\n    `\n      <p>Owner: ${OWNER}</p>\n      <p>Length: ${Math.round(LENGTH_MET)} meters</p>\n    `\n  )\n}","import React, { Component } from 'react';\nimport Key from './Key'\nimport Header from './Header'\nimport MapTypeSelector from './MapTypeSelector'\nimport mapSetup from '../mapSetup'\nimport 'leaflet/dist/leaflet.css'\nimport 'leaflet.markercluster/dist/MarkerCluster.css'\nimport 'leaflet.markercluster/dist/MarkerCluster.Default.css'\n\nclass App extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      mapType: 'street',\n      map: null,\n      streetTiles: null,\n      satelliteTiles: null\n    }\n  }\n  \n  getScreenSize () {\n    return window.innerHeight + 'px'\n  }\n\n  componentDidMount () {\n    const { map, streetTiles, satelliteTiles } = mapSetup(this.state.mapType)\n\n    this.setState({\n      map,\n      streetTiles,\n      satelliteTiles\n    })\n  }\n\n  updateMapType (mapType) {\n    this.setState({\n      mapType\n    })\n\n    const { map, streetTiles, satelliteTiles } = this.state\n\n    map.removeLayer(mapType === 'street' ? satelliteTiles : streetTiles)\n    map.addLayer(mapType === 'street' ? streetTiles : satelliteTiles)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"map\" style={{ height: this.getScreenSize() }}></div>\n        <Header />\n        <Key />\n        <MapTypeSelector updateMapType={this.updateMapType.bind(this)} currentMapType={this.state.mapType} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nrequire('dotenv').config();\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}